on:
  push:

jobs:
  # version_bump:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         ref: ${{ github.ref }}

  #     - name: "cat package.json"
  #       run: cat ./package.json

  #     - name: "Setup Node.js"
  #       uses: "actions/setup-node@v1"

  #     - name: "Automated Version Bump"
  #       uses: "phips28/gh-action-bump-version@master"
  #       with:
  #         tag-prefix: ''
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: "cat package.json"
  #       run: cat ./package.json

  deploy_android:
    runs-on: ubuntu-latest
    # needs: version_bump
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node_modules/
        uses: actions/cache@v1
        id: node_cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - name: Install Node Dependencies
        if: steps.node_cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Setup kernel for react native, increase watchers for release versions.
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Cache gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Install bundler for ruby package management
        run: gem install bundler
        working-directory: ./android

      - name: Cache ruby gems
        uses: actions/cache@v1
        id: ruby_cache
        with:
          path: android/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Ruby Dependencies
        if: steps.ruby_cache.outputs.cache-hit != 'true'
        run: | 
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: ./android

      - name: Build android Beta artifact
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: 'beta'
          subdirectory: 'android'
          bundle-install-path: 'vendor/bundle'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Beta Release (Test) ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload APK Asset
        id: upload-release-asset-apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: android/app/build/outputs/apk/release/app-release-unsigned-signed.apk
          asset_name: app-fastlane-${{ github.ref }}.apk
          asset_content_type: application/zip

      - name: Upload AAB Asset
        id: upload-release-asset-aab
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: android/app/build/outputs/bundle/release/app.aab
          asset_name: app-fastlane-${{ github.ref }}.aab
          asset_content_type: application/zip

  deploy_ios:
    runs-on: macOS-latest
    # needs: version_bump
    steps:
      - uses: actions/checkout@master

      - name: Set XCode Version
        run: sudo xcode-select -s /Applications/Xcode_11.app

      - name: Cache node_modules/
        uses: actions/cache@v1
        id: node_cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - name: Install Node Dependencies
        if: steps.node_cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Install bundler for ruby package management
        run: gem install bundler

      - name: Cache ruby gems
        uses: actions/cache@v1
        id: ruby_cache
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Ruby Dependencies
        if: steps.ruby_cache.outputs.cache-hit != 'true'
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: ./ios

      - name: Cache CocoaPods
        uses: actions/cache@v1
        id: cocoapods_cache
        with:
          path: ios/Pods
          key: ${{ runner.OS }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.OS }}-pods-

      - name: Install Cocoapods
        if: steps.cocoapods_cache.outputs.cache-hit != 'true'
        run: pod install --repo-update
        working-directory: ./ios

      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ secrets.MATCH_SSH_CERT }}"

      - name: Build ios Beta artifact
        uses: maierj/fastlane-action@v1.4.0
        # The names of the keys for secrets are specific and meaningful to Match.
        # Match password is responsible for decrypting the secrets from the cert repo
        # Fastlane password is responsible for interacting with the App Store to validate certificates and profiles.
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_GIT_BASIC_AUTH: ${{ secrets.MATCH_GIT_BASIC_AUTH }}
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          lane: 'beta'
          subdirectory: 'ios'
          bundle-install-path: 'vendor/bundle'